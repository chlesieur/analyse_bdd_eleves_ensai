{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Requête SQL\"\n",
        "author: \"Christophe Lesieur\"\n",
        "format:\n",
        "  html:\n",
        "    theme: cosmo        # Thème bootstrap léger\n",
        "    toc: true           # Table des matières\n",
        "    number-sections: true\n",
        "---\n",
        "\n",
        "```{css}\n",
        ":root {\n",
        "  font-size: 12px;      /* Police relativement petite (modifier ici si besoin) */\n",
        "}\n",
        "\n",
        "body {\n",
        "  font-family: \"Inter\", sans-serif; /* Police moderne et lisible */\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "# Introduction\n",
        "\n",
        "La requête se nomme \"Scola - Extraction Notes. Elle fonctione sur toutes les années de 2015-2016 à 2024-2025\". Il s'agit de la lancer année par année pour ensuite les compiler avec le programme \"Code R.qmd\"\n",
        "\n",
        "# Requête SQL\n",
        "\n",
        "/* =======================================================================\n",
        "   SYNTHÈSE : grain (id_etudiant, id_module, id_matiere)\n",
        "   ======================================================================= */\n",
        "\n",
        "SELECT\n",
        "    RIGHT(DATABASE(),4)                     AS annee_courante,\n",
        "\n",
        "    voie.voie_lib,\n",
        "    aide.situation,                         -- libellé(s) de voie(s) “10 juin”\n",
        "\n",
        "    /* — identité de l’étudiant — */\n",
        "    e.nom,\n",
        "    e.prenom,\n",
        "    e.libelle_etat_civil,\n",
        "    e.id_etudiant,\n",
        "\n",
        "    /* — module / matière — */\n",
        "    mo.libelle                              AS ue,\n",
        "    m.id_type_matiere,\n",
        "    m.intitule                              AS matiere,\n",
        "    m.code_matiere,\n",
        "    ROUND(moy.moyenne,2)                    AS moyenne_matiere,\n",
        "    ROUND(moymo.moyenne,2)                  AS moyenne_ue,\n",
        "\n",
        "    /* — variables « profil » (requête 1) — */\n",
        "    e.paysnai,\n",
        "    e.id_ref_paysnai,\n",
        "    e.id_nationalite,\n",
        "    e.libelle_statut_etudiant,\n",
        "    e.concours_origine,\n",
        "    e.concours_annee,\n",
        "    e.etab_origine_formation,\n",
        "    e.bac_annee,\n",
        "    e.bac_mention,\n",
        "    e.certif_anglais_org,\n",
        "    e.certif_anglais_score,\n",
        "    e.toeic,\n",
        "\n",
        "    /* — indicateurs issus de la requête “10 juin” — */\n",
        "    aide.date_naissance,\n",
        "    aide.sexe,\n",
        "    aide.double_diplome,\n",
        "    aide.autre_diplome,\n",
        "    aide.redoublement,\n",
        "    aide.att_ing,\n",
        "    aide.bac_spe1,\n",
        "    aide.bac_spe2,\n",
        "    aide.cpge,\n",
        "    aide.bourse,\n",
        "    aide.bourse_type,\n",
        "    aide.bourse_montant,\n",
        "    aide.id_pcs_pere,\n",
        "    aide.id_pcs_mere,\n",
        "\n",
        "    aide.MES1, aide.MHS1, aide.MIS1, aide.MSS1,\n",
        "    aide.MES2, aide.MHS2, aide.MIS2, aide.MSS2,\n",
        "    aide.MGS1, aide.MGS2,\n",
        "    aide.RES1, aide.RHS1, aide.RIS1, aide.RSS1,\n",
        "    aide.RES2, aide.RHS2, aide.RIS2, aide.RSS2,\n",
        "\n",
        "    aide.moyenne_generale,\n",
        "    aide.total_coeff,\n",
        "    aide.total_ects,\n",
        "    aide.rattrapage_max,\n",
        "    aide.AV                                      -- année validée (0/1)\n",
        "\n",
        "FROM moyenne              AS moy\n",
        "LEFT JOIN etudiant        AS e     ON e.id_etudiant   = moy.id_etudiant\n",
        "LEFT JOIN matiere         AS m     ON m.id_matiere    = moy.id_matiere\n",
        "LEFT JOIN module          AS mo    ON mo.id_module    = m.id_module\n",
        "LEFT JOIN moyenne_module  AS moymo ON moymo.id_module = m.id_module\n",
        "                                   AND moymo.id_etudiant = e.id_etudiant\n",
        "\n",
        "/* ======================= sous-requête « voies » ======================= */\n",
        "LEFT JOIN (\n",
        "    SELECT \n",
        "        ve.id_etudiant,\n",
        "        GROUP_CONCAT(DISTINCT v.lib ORDER BY v.lib) AS voie_lib\n",
        "    FROM voie_etudiant ve\n",
        "    INNER JOIN voie v ON v.id_voie = ve.id_voie\n",
        "    GROUP BY ve.id_etudiant\n",
        ") AS voie  ON voie.id_etudiant = e.id_etudiant\n",
        "\n",
        "/* ==================== sous-requête « agrégats annuels » =============== */\n",
        "LEFT JOIN (\n",
        "    /* -------- sélection agrégée par étudiant (version 10 juin) -------- */\n",
        "    SELECT \n",
        "        aide_int.id_etudiant,\n",
        "\n",
        "        MAX(aide_int.annee)              AS annee,\n",
        "        MAX(aide_int.date_naissance)     AS date_naissance,\n",
        "        MAX(aide_int.situation)          AS situation,\n",
        "        MAX(aide_int.sexe)               AS sexe,\n",
        "\n",
        "        MAX(aide_int.double_diplome)     AS double_diplome,\n",
        "        MAX(aide_int.autre_diplome)      AS autre_diplome,\n",
        "        MAX(aide_int.redoublement)       AS redoublement,\n",
        "        MAX(aide_int.att_ing)            AS att_ing,\n",
        "\n",
        "        MAX(aide_int.bac_annee)          AS bac_annee,\n",
        "        MAX(aide_int.bac_spe1)           AS bac_spe1,\n",
        "        MAX(aide_int.bac_spe2)           AS bac_spe2,\n",
        "        MAX(aide_int.bac_mention)        AS bac_mention,\n",
        "\n",
        "        MAX(aide_int.concours_origine)   AS concours_origine,\n",
        "        MAX(aide_int.situation_avant)    AS situation_avant,\n",
        "        MAX(aide_int.cpge)               AS cpge,\n",
        "\n",
        "        MAX(aide_int.bourse)             AS bourse,\n",
        "        MAX(aide_int.bourse_type)        AS bourse_type,\n",
        "        MAX(aide_int.bourse_montant)     AS bourse_montant,\n",
        "        MAX(aide_int.id_pcs_pere)        AS id_pcs_pere,\n",
        "        MAX(aide_int.id_pcs_mere)        AS id_pcs_mere,\n",
        "\n",
        "        /* — moyennes de groupes — */\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MES1',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MES1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MHS1',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MHS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MIS1',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MIS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MSS1',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MSS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MES2',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MES2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MHS2',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MHS2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MIS2',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MIS2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_note='MSS2',ROUND(aide_int.groupe_moyenne,2),NULL)) AS MSS2,\n",
        "\n",
        "        /* — moyennes semestrielles — */\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.semestre_cat_note='MGS1',ROUND(aide_int.semestre_moyenne,2),NULL)) AS MGS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.semestre_cat_note='MGS2',ROUND(aide_int.semestre_moyenne,2),NULL)) AS MGS2,\n",
        "\n",
        "        /* — rattrapages — */\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RES1',aide_int.groupe_ratt,NULL)) AS RES1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RHS1',aide_int.groupe_ratt,NULL)) AS RHS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RIS1',aide_int.groupe_ratt,NULL)) AS RIS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RSS1',aide_int.groupe_ratt,NULL)) AS RSS1,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RES2',aide_int.groupe_ratt,NULL)) AS RES2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RHS2',aide_int.groupe_ratt,NULL)) AS RHS2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RIS2',aide_int.groupe_ratt,NULL)) AS RIS2,\n",
        "        GROUP_CONCAT(DISTINCT IF(aide_int.groupe_cat_ratt='RSS2',aide_int.groupe_ratt,NULL)) AS RSS2,\n",
        "\n",
        "        MAX(aide_int.moyenne_generale)   AS moyenne_generale,\n",
        "        MAX(aide_int.total_coeff)        AS total_coeff,\n",
        "        MAX(aide_int.total_ects)         AS total_ects,\n",
        "        MAX(aide_int.rattrapage_max)     AS rattrapage_max,\n",
        "        MAX(aide_int.AV)                 AS AV\n",
        "\n",
        "    FROM (\n",
        "        /* ------------------- bloc interne (version 10 juin) ------------------- */\n",
        "        SELECT \n",
        "            e.id_etudiant,\n",
        "            DATE_FORMAT(e.datenai,'%d/%m/%Y')                       AS date_naissance,\n",
        "            RIGHT(DATABASE(),4)                                     AS annee,\n",
        "            CONCAT(e.nom,' ',e.prenom)                              AS nom_complet,\n",
        "            CASE\n",
        "                WHEN e.libelle_etat_civil IN ('Monsieur','M.') THEN '1'\n",
        "                WHEN e.libelle_etat_civil IN ('Madame','Mme','Mademoiselle') THEN '2'\n",
        "                ELSE '?'\n",
        "            END                                                    AS sexe,\n",
        "            GROUP_CONCAT(DISTINCT v.lib ORDER BY v.ordre)           AS situation,\n",
        "            e.diplome_double1                                       AS double_diplome,\n",
        "            e.diplome_autre1                                        AS autre_diplome,\n",
        "            IF(MAX(IFNULL(v.niveau,0)) = MAX(IFNULL(v_avant.niveau,0)),1,0) AS redoublement,\n",
        "            IF(GROUP_CONCAT(DISTINCT v.libelle ORDER BY v.ordre) LIKE '%Attaché%','attaché','ingénieur') AS att_ing,\n",
        "            e.bac_annee,\n",
        "            e.bac_serie                                             AS bac_spe1,\n",
        "            NULL                                                    AS bac_spe2,\n",
        "            bac_mention.libelle                                     AS bac_mention,\n",
        "            e.concours_origine,\n",
        "            rsp.libelle                                             AS situation_avant,\n",
        "            cpge.libelle                                            AS cpge,\n",
        "            IF(IFNULL(e.type_bourse,'')='',0,1)                     AS bourse,\n",
        "            e.type_bourse                                           AS bourse_type,\n",
        "            e.bourse_montant,\n",
        "            e.id_pcs_pere,\n",
        "            e.id_pcs_mere,\n",
        "\n",
        "            /* — résultats de groupe (MESx, …) — */\n",
        "            grp.id_periode,\n",
        "            grp.cat_note            AS groupe_cat_note,\n",
        "            grp.cat_ratt            AS groupe_cat_ratt,\n",
        "            grp.moyenne             AS groupe_moyenne,\n",
        "            grp.ratt                AS groupe_ratt,\n",
        "\n",
        "            /* — résultats semestriels — */\n",
        "            sem.cat_note            AS semestre_cat_note,\n",
        "            sem.moyenne             AS semestre_moyenne,\n",
        "\n",
        "            /* — moyennes générales annuelles — */\n",
        "            moy_gen.moyenne_generale,\n",
        "            moy_gen.total_coeff,\n",
        "            moy_gen.total_ects,\n",
        "            moy_gen.rattrapage_max,\n",
        "\n",
        "            /* — validation annuelle — */\n",
        "            IF(com.commentaire LIKE '%année validée%',1,0)          AS AV\n",
        "\n",
        "        FROM etudiant e\n",
        "        INNER JOIN voie_etudiant ve  ON ve.id_etudiant = e.id_etudiant\n",
        "        INNER JOIN voie v            ON v.id_voie      = ve.id_voie\n",
        "                                     AND v.cle_voie    = 1\n",
        "                                     AND v.voie_option = 0\n",
        "\n",
        "        LEFT JOIN commentaire com         ON com.id_etudiant = e.id_etudiant\n",
        "        LEFT JOIN ref_cpge cpge           ON cpge.id_ref_cpge = e.id_ref_cpge\n",
        "        LEFT JOIN ref_bac_mention bac_mention\n",
        "                                          ON bac_mention.id_ref_bac_mention = e.id_ref_bac_mention\n",
        "        LEFT JOIN ref_situation_pre rsp   ON rsp.id_ref_situation_pre       = e.id_ref_situation_pre\n",
        "\n",
        "        /* — année N-1 pour détecter redoublement — */\n",
        "        LEFT JOIN ensai_2024.voie_etudiant ve_avant\n",
        "                                          ON ve_avant.id_etudiant = e.id_etudiant\n",
        "        LEFT JOIN ensai_2024.voie v_avant ON v_avant.id_voie      = ve_avant.id_voie\n",
        "                                         AND v_avant.cle_voie     = 1\n",
        "\n",
        "        /* ---- sous-total par groupe (MESx, …) ---- */\n",
        "        LEFT JOIN (\n",
        "            SELECT \n",
        "                moy.id_etudiant,\n",
        "                CONCAT('M',LEFT(rtm.lib,1),'S',modu.id_periode) AS cat_note,\n",
        "                CONCAT('R',LEFT(rtm.lib,1),'S',modu.id_periode) AS cat_ratt,\n",
        "                modu.id_periode,\n",
        "                SUM(moy.moyenne*m.coefficient)/SUM(m.coefficient) AS moyenne,\n",
        "                SUM(moy.rattrapage)                           AS ratt\n",
        "            FROM matiere m\n",
        "            INNER JOIN ref_type_matiere rtm  ON rtm.id_ref_type_matiere = m.id_type_matiere\n",
        "            INNER JOIN module           modu ON modu.id_module          = m.id_module\n",
        "            INNER JOIN moyenne          moy  ON moy.id_matiere          = m.id_matiere\n",
        "            WHERE m.bonus = 0\n",
        "            GROUP BY\n",
        "                moy.id_etudiant,\n",
        "                modu.id_periode,\n",
        "                m.id_type_matiere\n",
        "        ) AS grp ON grp.id_etudiant = e.id_etudiant\n",
        "\n",
        "        /* ---- sous-total semestriel ---- */\n",
        "        LEFT JOIN (\n",
        "            SELECT \n",
        "                CONCAT('MGS',modu.id_periode)                    AS cat_note,\n",
        "                modu.id_periode,\n",
        "                mmoy.id_etudiant,\n",
        "                SUM(mmoy.moyenne*mmoy.coefficient)/SUM(mmoy.coefficient) AS moyenne\n",
        "            FROM moyenne_module mmoy\n",
        "            INNER JOIN module modu ON modu.id_module = mmoy.id_module\n",
        "            WHERE IFNULL(modu.id_periode,0) > 0\n",
        "              AND mmoy.moyenne IS NOT NULL\n",
        "            GROUP BY\n",
        "                modu.id_periode,\n",
        "                mmoy.id_etudiant\n",
        "        ) AS sem ON sem.id_etudiant = e.id_etudiant\n",
        "               AND sem.id_periode  = grp.id_periode\n",
        "\n",
        "        /* ---- moyenne générale annuelle ---- */\n",
        "        LEFT JOIN (\n",
        "            SELECT \n",
        "                id_etudiant,\n",
        "                ROUND(SUM(moyenne*coefficient)/SUM(coefficient),2) AS moyenne_generale,\n",
        "                SUM(coefficient)                                   AS total_coeff,\n",
        "                SUM(credit_ects)                                   AS total_ects,\n",
        "                MAX(rattrapage)                                    AS rattrapage_max\n",
        "            FROM (\n",
        "                SELECT \n",
        "                    mm.id_etudiant,\n",
        "                    SUM(mm.coefficient*mm.moyenne)/SUM(mm.coefficient)\n",
        "                      + IFNULL(bonus.somme_bonus,0)                AS moyenne,\n",
        "                    modu.id_periode,\n",
        "                    SUM(mm.coefficient)                            AS coefficient,\n",
        "                    SUM(mm.credit_ects_valide)                     AS credit_ects,\n",
        "                    MAX(mm.rattrapage)                             AS rattrapage\n",
        "                FROM moyenne_module mm\n",
        "                INNER JOIN module modu ON modu.id_module = mm.id_module\n",
        "                LEFT JOIN (\n",
        "                    SELECT \n",
        "                        m2.id_etudiant,\n",
        "                        m.bonus          AS id_periode,\n",
        "                        SUM(m2.note)     AS somme_bonus\n",
        "                    FROM moyenne m2\n",
        "                    INNER JOIN matiere m ON m.id_matiere = m2.id_matiere\n",
        "                    WHERE m.bonus > 0 AND m.id_module = 0\n",
        "                    GROUP BY m2.id_etudiant, m.bonus\n",
        "                ) AS bonus ON bonus.id_etudiant = mm.id_etudiant\n",
        "                          AND modu.id_periode  = bonus.id_periode\n",
        "                GROUP BY mm.id_etudiant, modu.id_periode\n",
        "            ) AS t\n",
        "            GROUP BY id_etudiant\n",
        "        ) AS moy_gen ON moy_gen.id_etudiant = e.id_etudiant\n",
        "\n",
        "        GROUP BY\n",
        "            e.id_etudiant,\n",
        "            grp.cat_note\n",
        "    ) AS aide_int\n",
        "\n",
        "    GROUP BY aide_int.id_etudiant\n",
        "    HAVING MGS1 IS NOT NULL OR MGS2 IS NOT NULL\n",
        ") AS aide ON aide.id_etudiant = e.id_etudiant\n",
        "\n",
        "/* ======================= regroupement final & tri ===================== */\n",
        "GROUP BY \n",
        "    e.id_etudiant,\n",
        "    m.id_module,\n",
        "    m.id_matiere\n",
        "\n",
        "ORDER BY\n",
        "    voie.voie_lib,\n",
        "    e.id_etudiant DESC,\n",
        "    m.id_module,\n",
        "    m.id_matiere;"
      ],
      "id": "eea9a772"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\clesieur\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}