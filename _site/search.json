[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analyse BDD élèves ENSAI",
    "section": "",
    "text": "External link to Quarto website\nR example"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Analyse BDD élèves ENSAI",
    "section": "",
    "text": "External link to Quarto website\nR example"
  },
  {
    "objectID": "doc/r.html",
    "href": "doc/r.html",
    "title": "R code",
    "section": "",
    "text": "alpha &lt;- 0.5\nbeta &lt;- 0.5\nn_values &lt;- 500\n\nset.seed(123)\nbeta_values &lt;- rbeta(n = n_values, shape1 = alpha, shape2 = beta)\n\nplot(density(beta_values),\n     main = expression(paste(\"Density of Beta(\", alpha, \" = 0.5, \", beta, \" = 0.5) Distribution\")),\n     xlab = \"Value\",\n     ylab = \"Density\",\n     col = \"blue\",\n     lwd = 2,\n     cex.main = 1.2,\n     cex.lab = 1.1,\n     cex.axis = 1.0\n)"
  },
  {
    "objectID": "doc/Code R.html",
    "href": "doc/Code R.html",
    "title": "===================================================================================",
    "section": "",
    "text": "===================================================================================\n\n\nCREATION ET ALIMENTATION AUTOMATIQUE DE LA BDD ETUDIANT POUR ANALYSES STATISTIQUES\n\n\n===================================================================================\nlibrary(purrr) library(dplyr) library(stringr) library(arrow)\n\n\nRépertoire où déposer les exports pamplemousse tels quels\nrepertoire &lt;- “export pamplemousse”\n\n\nLecture automatique des exports pamplemousse\nfichiers_csv &lt;- list.files(path = repertoire, pattern = “*.csv”)\n\n\ntri les fichiers\nfichiers_csv_tries &lt;- sort(fichiers_csv)\n\n\nInitialise un dataframe bdd\nbdd &lt;- data.frame()\nfor (fichier in fichiers_csv_tries) {\ndata &lt;- read.csv2(paste0(repertoire,“/”,fichier), encoding = “latin1”)\n# Vérifie si les colonnes sont les mêmes que celles de la bdd if (ncol(bdd) &gt; 0 && !identical(names(data), names(bdd))) { stop(paste(“Les colonnes du fichier”, fichier, “ne correspondent pas aux autres fichiers.”)) }\n# Ajoute les données du fichier courant à la bdd bdd &lt;- rbind(bdd, data) }\n\n\nVérification de doublons\nany(duplicated(bdd)) bdd &lt;- unique(bdd) any(duplicated(bdd))\n\n\nGestion des problèmes de formats (suppression des =)\nnoms_variables &lt;- names(bdd) nouveaux_noms &lt;- gsub(“^X.”, ““, noms_variables) names(bdd) &lt;- nouveaux_noms\nsupprimer_egal &lt;- function(x) { if (is.character(x)) { gsub(“^=”, ““, x) } else { x } }\nbdd &lt;- as.data.frame(sapply(bdd, supprimer_egal))\n\n\nSeules les variables de note sont numérisées\nbdd\\(moyenne_matiere &lt;- gsub(\",\", \".\", bdd\\)moyenne_matiere) bdd\\(moyenne_matiere &lt;- as.numeric(bdd\\)moyenne_matiere)\nbdd\\(moyenne_ue &lt;- gsub(\",\", \".\", bdd\\)moyenne_ue) bdd\\(moyenne_ue &lt;- as.numeric(bdd\\)moyenne_ue)\nbdd\\(toeic &lt;- as.numeric(bdd\\)toeic)\n\n\nCréation des variables de travail\n\n\nChoix à discuter\nbdd_2 &lt;- bdd %&gt;% mutate( annee_scolaire = as.character(paste0(as.numeric(annee),“-”,as.numeric(annee)+1)), annee_ecole = case_when( substr(voie_lib, 1, 2) == “1A” ~ “1A”, substr(voie_lib, 1, 2) == “2A” ~ “2A”, substr(voie_lib, 1, 2) == “3A” ~ “3A”, TRUE ~ “Autres” ), statut_etudiant = case_when( grepl(“ing”, libelle_statut_etudiant, ignore.case = TRUE) == TRUE ~ “Ingénieur”, grepl(“att”, libelle_statut_etudiant, ignore.case = TRUE) == TRUE ~ “Attaché”, grepl(“Mastère”, libelle_statut_etudiant) == TRUE ~ “Mastère”, grepl(“Master”, libelle_statut_etudiant) == TRUE ~ “Master”, TRUE ~ “Autres”), voie_entree = case_when( grepl(“Concours”, concours_origine) == TRUE ~ “Concours-1A”, grepl(“admission en 1ère année”, concours_origine) == TRUE ~ “AST-1A”, grepl(“admission en 2e année|STID”, concours_origine) == TRUE ~ “AST-2A”, grepl(“MSc Big Data”, concours_origine) == TRUE ~ “AST-2A”, grepl(“Erasmus”, concours_origine) == TRUE ~ “Erasmus”, TRUE ~ “Autres”), specialite_entree=case_when( grepl(“mathématiques”, concours_origine) == TRUE ~ “Mathématiques”, grepl(“économie et sciences sociales”, concours_origine) == TRUE ~ “Économie”, grepl(“STID”, concours_origine) == TRUE ~ “But-Stid”, grepl(“interne”, concours_origine) == TRUE ~ “Interne”, TRUE ~ “Autres”), filiere_1A = case_when( substr(voie_lib, 1, 2) == “1A” & grepl(“Maths”, voie_lib, ignore.case = TRUE) ~ “Maths”, substr(voie_lib, 1, 2) == “1A” & grepl(“Eco”, voie_lib, ignore.case = TRUE) ~ “Eco”, substr(voie_lib, 1, 2) == “1A” & grepl(“Interne”, voie_lib, ignore.case = TRUE) ~ “Interne”, substr(voie_lib, 1, 2) == “1A” & grepl(“Stid”, voie_lib, ignore.case = TRUE) ~ “But”, substr(voie_lib, 1, 2) == “1A” ~ “Autres”, ), filiere_2A = case_when( substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 1”, voie_lib, ignore.case = TRUE) ~ “ATPA”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 2|Menu 3|DIGISPORT”, voie_lib, ignore.case = TRUE) ~ “SB/GS/DIGISPORT”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 4”, voie_lib, ignore.case = TRUE) ~ “ID/STD”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 5”, voie_lib, ignore.case = TRUE) ~ “MES/EMOS”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 6”, voie_lib, ignore.case = TRUE) ~ “MSP/ES”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 7”, voie_lib, ignore.case = TRUE) ~ “GR”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 8”, voie_lib, ignore.case = TRUE) ~ “MAR”, substr(voie_lib, 1, 2) == “2A” & grepl(“Menu 9”, voie_lib, ignore.case = TRUE) ~ “ERASMUS OUT”, substr(voie_lib, 1, 2) == “2A” ~ “Autres”,\n), filiere_3A = case_when( substr(voie_lib, 1, 2) == “3A” & grepl(“Att,Master”, voie_lib, ignore.case = TRUE) ~ “MSP”, substr(voie_lib, 1, 2) == “3A” & grepl(“GDRIF/GR”, voie_lib, ignore.case = TRUE) ~ “GR”, substr(voie_lib, 1, 2) == “3A” & grepl(“GS”, voie_lib, ignore.case = TRUE) ~ “GS”, substr(voie_lib, 1, 2) == “3A” & grepl(“MKT”, voie_lib, ignore.case = TRUE) ~ “MKT”, substr(voie_lib, 1, 2) == “3A” & grepl(“ID”, voie_lib, ignore.case = TRUE) ~ “ID”, substr(voie_lib, 1, 2) == “3A” & grepl(“ISTS”, voie_lib, ignore.case = TRUE) ~ “ISTS”, substr(voie_lib, 1, 2) == “3A” & grepl(“MES”, voie_lib, ignore.case = TRUE) ~ “MES”, substr(voie_lib, 1, 2) == “3A” & grepl(“M”, voie_lib, ignore.case = TRUE) ~ “M”, substr(voie_lib, 1, 2) == “3A” & grepl(“SID”, voie_lib, ignore.case = TRUE) ~ “SID”, substr(voie_lib, 1, 2) == “3A” & grepl(“SV”, voie_lib, ignore.case = TRUE) ~ “SV”, substr(voie_lib, 1, 2) == “3A” & grepl(“ES”, voie_lib, ignore.case = TRUE) ~ “ES”, substr(voie_lib, 1, 2) == “3A” ~ “Autres”\n), sexe = case_when( libelle_etat_civil == “Monsieur” ~ “Homme”, libelle_etat_civil == “Madame” ~ “Femme”, TRUE ~ “Autres” ), nationalite = case_when( id_nationalite == 100 ~ “Français”, TRUE ~“Étranger” ), cat_matiere = case_when( id_type_matiere == 1 ~“Informatique”, id_type_matiere == 2 ~“Mathématiques/Statistiques”, id_type_matiere == 3 ~“Économie”, id_type_matiere == 4~ “Langues/Humanités”, TRUE ~ “Autres” ) )\n\n\nOn conserve les variables utiles\nbdd &lt;- as.data.frame(sapply(bdd_2, supprimer_egal)) %&gt;% select(annee_scolaire, id_etudiant, nom, prenom, sexe, nationalite, id_nationalite, paysnai, etab_origine_formation, concours_origine, concours_annee, bac_annee, bac_mention, toeic, annee_ecole, statut_etudiant, voie_entree, specialite_entree, filiere_1A, filiere_2A, filiere_3A, id_type_matiere, cat_matiere, code_matiere, matiere, ue, moyenne_matiere, moyenne_ue, voie_lib)\n\n\nLabels pour création d’un dictionnaire\nbdd\\(annee_scolaire &lt;- structure(bdd\\)annee_scolaire, label = “Année de scolarité”) bdd\\(id_etudiant &lt;- structure(bdd\\)id_etudiant, label = “Identifiant de l’étudiant”) bdd\\(nom &lt;- structure(bdd\\)nom , label = “Nom de l’étudiant”) bdd\\(prenom &lt;- structure(bdd\\)prenom, label = “Prénom de l’étudiant”) bdd\\(sexe &lt;- structure(bdd\\)sexe, label = “Sexe de l’étudiant”) bdd\\(nationalite &lt;- structure(bdd\\)nationalite, label = “Nationalité de l’étudiant”) bdd\\(id_nationalite &lt;- structure(bdd\\)id_nationalite, label = “Identifiant de la nationalité de l’étudiant”) bdd\\(paysnai &lt;- structure(bdd\\)paysnai, label = “Pays de naissance de l’étudiant”) bdd\\(etab_origine_formation &lt;- structure(bdd\\)etab_origine_formation, label = “Type d’établissement d’origine de l’étudiant”) bdd\\(concours_origine &lt;- structure(bdd\\)concours_origine, label = “Concours d’origine de l’étudiant”) bdd\\(concours_annee &lt;- structure(bdd\\)concours_annee, label = “Année d’entrée à l’Ensai de l’étudiant”) bdd\\(bac_annee &lt;- structure(bdd\\)bac_annee, label = “Année d’obtention du bac de l’étudiant”) bdd\\(bac_mention &lt;- structure(bdd\\)bac_mention, label = “Mention au bac de l’étudiant”) bdd\\(toeic &lt;- structure(bdd\\)toeic, label = “Score au Toeic”) bdd\\(annee_ecole &lt;- structure(bdd\\)annee_ecole, label = “Niveau/Année dans l’école (1A-2A-3A)”) bdd\\(statut_etudiant &lt;- structure(bdd\\)statut_etudiant, label = “Statut de l’étudiant”) bdd\\(voie_entree &lt;- structure(bdd\\)voie_entree, label = “Voie d’entrée à l’Ensai”) bdd\\(specialite_entree &lt;- structure(bdd\\)specialite_entree, label = “Spécialité à l’entrée à l’Ensai”) bdd\\(filiere_1A &lt;- structure(bdd\\)filiere_1A, label = “Filière en 1ère année à l’Ensai”) bdd\\(filiere_2A &lt;- structure(bdd\\)filiere_2A, label = “Filière en 2ème année à l’Ensai”) bdd\\(filiere_3A &lt;- structure(bdd\\)filiere_3A, label = “Filière en 3ème année à l’Ensai”) bdd\\(id_type_matiere &lt;- structure(bdd\\)id_type_matiere, label = “Identifiant de la matière”) bdd\\(cat_matiere &lt;- structure(bdd\\)cat_matiere, label = “Catégorie de la matière”) bdd\\(code_matiere &lt;- structure(bdd\\)code_matiere, label = “Code de la matière”) bdd\\(matiere &lt;- structure(bdd\\)matiere, label = “Nom de la matière”) bdd\\(ue &lt;- structure(bdd\\)ue, label = “Nom de l’UE de la matière”) bdd\\(moyenne_matiere &lt;- structure(bdd\\)moyenne_matiere, label = “Note moyenne de l’étudiant à la matière”) bdd\\(moyenne_ue &lt;- structure(bdd\\)moyenne_ue, label = “Note moyenne de l’étudiant à l’a matière’UE”) bdd\\(voie_lib &lt;- structure(bdd\\)voie_lib, label = “Libellé long de la voie d’appartenance”)\n\n\nExport en cvs\nwrite.csv2(bdd, “bdd/bdd_2010_2024.csv”, row.names = FALSE)\n\n\nExport en RDS\nwrite_parquet(bdd,“bdd/bdd_2010_2024.parquet”)"
  },
  {
    "objectID": "doc/Requête SQL.html",
    "href": "doc/Requête SQL.html",
    "title": "Requete SQL Pamplemousse",
    "section": "",
    "text": "—- REQUETE SIMPLE —-\nSELECT e.nom, e.prenom, modu.code_module, modu.libelle AS module,\nm.code_matiere, m.intitule, m.coefficient, m.credit_ects, moy.moyenne, moy.rang, moy.rang_max, moy.rattrapage, e.id_etudiant, m.id_matiere, modu.id_module FROM moyenne moy INNER JOIN matiere m ON (m.id_matiere=moy.id_matiere) INNER JOIN module modu ON (modu.id_module=m.id_module) INNER JOIN etudiant e ON (e.id_etudiant=moy.id_etudiant)\n—- REQUETE AMELIOREE (notamment pour avoir les voies et les années) —-\nSELECT aux_voie.voie_lib, e.nom, e.prenom, e.libelle_etat_civil, e.id_etudiant, mo.libelle AS ue, m.intitule AS matiere, m.code_matiere AS code_matiere, ROUND(moy.moyenne,2) AS moyenne_matiere, ROUND(moymo.moyenne,2) AS moyenne_ue, e.paysnai, e.id_ref_paysnai, e.id_nationalite, e.libelle_statut_etudiant, e.concours_origine, e.concours_annee, e.etab_origine_formation, e.bac_annee, e.bac_mention, e.certif_anglais_org, e.certif_anglais_score, e.toeic FROM moyenne moy LEFT JOIN etudiant e ON (e.id_etudiant=moy.id_etudiant) LEFT JOIN matiere m ON (m.id_matiere=moy.id_matiere) LEFT JOIN module mo ON (m.id_module=mo.id_module) LEFT JOIN moyenne_module moymo ON (moymo.id_module=m.id_module AND moymo.id_etudiant=e.id_etudiant) LEFT JOIN ( SELECT ve.id_etudiant, GROUP_CONCAT(DISTINCT v.lib ORDER BY v.lib) AS voie_lib FROM voie_etudiant ve INNER JOIN voie v ON (v.id_voie=ve.id_voie) GROUP BY ve.id_etudiant ) aux_voie ON (aux_voie.id_etudiant=e.id_etudiant) GROUP BY e.id_etudiant, moymo.id_module, moy.id_matiere ORDER BY aux_voie.voie_lib, e.id_etudiant DESC\n—- REQUETE AUGMENTEE (pour avoir les redoublements) ——-\nSELECT\nannee, situation, nom, id_etudiant, date_naissance, sexe, double_diplome, autre_diplome, redoublement, att_ing, bac_annee, bac_spe1, bac_spe2, bac_mention, concours_origine, situation_avant, cpge, bourse, bourse_type, bourse_montant, id_pcs_pere, id_pcs_mere,\nGROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MES1’,ROUND(groupe_moyenne,2),NULL)) AS MES1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MHS1’,ROUND(groupe_moyenne,2),NULL)) AS MHS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MIS1’,ROUND(groupe_moyenne,2),NULL)) AS MIS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MSS1’,ROUND(groupe_moyenne,2),NULL)) AS MSS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MES2’,ROUND(groupe_moyenne,2),NULL)) AS MES2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MHS2’,ROUND(groupe_moyenne,2),NULL)) AS MHS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MIS2’,ROUND(groupe_moyenne,2),NULL)) AS MIS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MSS2’,ROUND(groupe_moyenne,2),NULL)) AS MSS2,\nGROUP_CONCAT(DISTINCT IF(semestre_cat_note=‘MGS1’,ROUND(semestre_moyenne,2),NULL)) AS MGS1, GROUP_CONCAT(DISTINCT IF(semestre_cat_note=‘MGS2’,ROUND(semestre_moyenne,2),NULL)) AS MGS2,\nGROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RES1’,groupe_ratt,NULL)) AS RES1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RHS1’,groupe_ratt,NULL)) AS RHS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RIS1’,groupe_ratt,NULL)) AS RIS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RSS1’,groupe_ratt,NULL)) AS RSS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RES2’,groupe_ratt,NULL)) AS RES2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RHS2’,groupe_ratt,NULL)) AS RHS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RIS2’,groupe_ratt,NULL)) AS RIS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RSS2’,groupe_ratt,NULL)) AS RSS2, AV FROM ( SELECT e.id_etudiant, DATE_FORMAT(e.datenai,‘%d/%m/%Y’) AS date_naissance, RIGHT(DATABASE(),4) AS annee, CONCAT(nom,’ ‘,prenom) AS nom, CASE WHEN e.libelle_etat_civil IN (’Monsieur’,‘M.’) THEN “1” WHEN e.libelle_etat_civil IN (‘Madame’,‘Mme’,‘Mademoiselle’) THEN “2” ELSE “?” END AS sexe, GROUP_CONCAT(DISTINCT v.lib ORDER BY v.ordre) AS situation, diplome_double1 AS double_diplome, diplome_autre1 AS autre_diplome, IF(MAX(IFNULL(v.niveau,0))=MAX(IFNULL(v_avant.niveau,0)),1,0) AS redoublement, IF(GROUP_CONCAT(DISTINCT v.libelle ORDER BY v.ordre) LIKE ‘%Attaché%’,‘attaché’,‘ingénieur’) AS att_ing, bac_annee, bac_serie AS bac_spe1, NULL as bac_spe2, bac_mention.libelle AS bac_mention,– id_ref_bac_mention concours_origine, rsp.libelle AS situation_avant, cpge.libelle AS cpge, IF(IFNULL(type_bourse,’‘)=’‘,0,1) AS bourse, type_bourse AS bourse_type, bourse_montant, id_pcs_pere, id_pcs_mere, groupe.id_periode, groupe.cat_note AS groupe_cat_note, groupe.cat_ratt AS groupe_cat_ratt, groupe.moyenne AS groupe_moyenne, groupe.ratt AS groupe_ratt, semestre.cat_note AS semestre_cat_note, semestre.moyenne AS semestre_moyenne, IF(com.commentaire LIKE’%année validée%‘,1,0) AS AV FROM etudiant e INNER JOIN voie_etudiant ve ON (ve.id_etudiant=e.id_etudiant) INNER JOIN voie v ON (v.id_voie=ve.id_voie AND v.cle_voie=1 AND v.voie_option=0) LEFT JOIN commentaire com ON (com.id_etudiant=e.id_etudiant) LEFT JOIN ref_cpge cpge ON (cpge.id_ref_cpge=e.id_ref_cpge) LEFT JOIN ref_bac_mention bac_mention ON (bac_mention.id_ref_bac_mention=e.id_ref_bac_mention) LEFT JOIN ref_situation_pre rsp ON (rsp.id_ref_situation_pre=e.id_ref_situation_pre) LEFT JOIN ensai_{annee_base_avant}.voie_etudiant ve_avant ON (ve_avant.id_etudiant=e.id_etudiant) LEFT JOIN ensai_{annee_base_avant}.voie v_avant ON (v_avant.id_voie=ve_avant.id_voie AND v_avant.cle_voie=1) LEFT JOIN ( SELECT moy.id_etudiant, CONCAT(’M’,LEFT(rtm.lib,1),‘S’,modu.id_periode) AS cat_note, CONCAT(‘R’,LEFT(rtm.lib,1),‘S’,modu.id_periode) AS cat_ratt, modu.id_periode, SUM(moy.moyennem.coefficient)/SUM(m.coefficient) AS moyenne, SUM(moy.rattrapage) AS ratt FROM matiere m INNER JOIN ref_type_matiere rtm ON (rtm.id_ref_type_matiere=m.id_type_matiere) INNER JOIN module modu ON (modu.id_module=m.id_module) INNER JOIN moyenne moy ON (moy.id_matiere=m.id_matiere) WHERE m.bonus=0 GROUP BY moy.id_etudiant, modu.id_periode, m.id_type_matiere ) AS groupe ON (e.id_etudiant=groupe.id_etudiant) LEFT JOIN ( SELECT CONCAT(‘MGS’,modu.id_periode) AS cat_note, modu.id_periode, mmoy.id_etudiant, SUM(mmoy.moyennemmoy.coefficient)/SUM(mmoy.coefficient) AS moyenne FROM moyenne_module mmoy INNER JOIN module modu ON (modu.id_module=mmoy.id_module) WHERE IFNULL(modu.id_periode,0)&gt;0 AND mmoy.moyenne IS NOT NULL GROUP BY modu.id_periode, mmoy.id_etudiant ) AS semestre ON ( e.id_etudiant=semestre.id_etudiant AND groupe.id_periode=semestre.id_periode ) GROUP BY e.id_etudiant, groupe.cat_note ) AS aide GROUP BY id_etudiant HAVING MGS1 IS NOT NULL OR MGS2 IS NOT NULL ORDER BY situation, nom\n—- REQUETE ENCORE AMELIOREE (+ d’informations) ——\nSELECT annee, situation, nom, id_etudiant, date_naissance, sexe, double_diplome, autre_diplome, redoublement, att_ing, bac_annee, bac_spe1, bac_spe2, bac_mention, concours_origine, situation_avant, cpge, bourse, bourse_type, bourse_montant, id_pcs_pere, id_pcs_mere, paysnai, id_ref_paysnai, id_nationalite, concours_annee, etab_origine_formation, certif_anglais_org, certif_anglais_score, toeic,\nGROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MES1’,ROUND(groupe_moyenne,2),NULL)) AS MES1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MHS1’,ROUND(groupe_moyenne,2),NULL)) AS MHS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MIS1’,ROUND(groupe_moyenne,2),NULL)) AS MIS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MSS1’,ROUND(groupe_moyenne,2),NULL)) AS MSS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MES2’,ROUND(groupe_moyenne,2),NULL)) AS MES2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MHS2’,ROUND(groupe_moyenne,2),NULL)) AS MHS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MIS2’,ROUND(groupe_moyenne,2),NULL)) AS MIS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_note=‘MSS2’,ROUND(groupe_moyenne,2),NULL)) AS MSS2,\nGROUP_CONCAT(DISTINCT IF(semestre_cat_note=‘MGS1’,ROUND(semestre_moyenne,2),NULL)) AS MGS1, GROUP_CONCAT(DISTINCT IF(semestre_cat_note=‘MGS2’,ROUND(semestre_moyenne,2),NULL)) AS MGS2,\nGROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RES1’,groupe_ratt,NULL)) AS RES1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RHS1’,groupe_ratt,NULL)) AS RHS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RIS1’,groupe_ratt,NULL)) AS RIS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RSS1’,groupe_ratt,NULL)) AS RSS1, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RES2’,groupe_ratt,NULL)) AS RES2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RHS2’,groupe_ratt,NULL)) AS RHS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RIS2’,groupe_ratt,NULL)) AS RIS2, GROUP_CONCAT(DISTINCT IF(groupe_cat_ratt=‘RSS2’,groupe_ratt,NULL)) AS RSS2, AV FROM ( SELECT e.id_etudiant, DATE_FORMAT(e.datenai,‘%d/%m/%Y’) AS date_naissance, RIGHT(DATABASE(),4) AS annee, CONCAT(nom,’ ‘,prenom) AS nom, CASE WHEN e.libelle_etat_civil IN (’Monsieur’,‘M.’) THEN “1” WHEN e.libelle_etat_civil IN (‘Madame’,‘Mme’,‘Mademoiselle’) THEN “2” ELSE “?” END AS sexe, GROUP_CONCAT(DISTINCT v.lib ORDER BY v.ordre) AS situation, diplome_double1 AS double_diplome, diplome_autre1 AS autre_diplome, IF(MAX(IFNULL(v.niveau,0))=MAX(IFNULL(v_avant.niveau,0)),1,0) AS redoublement, IF(GROUP_CONCAT(DISTINCT v.libelle ORDER BY v.ordre) LIKE ‘%Attaché%’,‘attaché’,‘ingénieur’) AS att_ing, bac_annee, bac_serie AS bac_spe1, NULL as bac_spe2, bac_mention.libelle AS bac_mention,– id_ref_bac_mention concours_origine, rsp.libelle AS situation_avant, cpge.libelle AS cpge, IF(IFNULL(type_bourse,’‘)=’‘,0,1) AS bourse, type_bourse AS bourse_type, bourse_montant, id_pcs_pere, id_pcs_mere, groupe.id_periode, groupe.cat_note AS groupe_cat_note, groupe.cat_ratt AS groupe_cat_ratt, groupe.moyenne AS groupe_moyenne, groupe.ratt AS groupe_ratt, semestre.cat_note AS semestre_cat_note, semestre.moyenne AS semestre_moyenne, IF(com.commentaire LIKE’%année validée%’,1,0) AS AV, e.paysnai, e.id_ref_paysnai, e.id_nationalite, e.concours_annee, e.etab_origine_formation, e.certif_anglais_org, e.certif_anglais_score, e.toeic\nFROM etudiant e INNER JOIN voie_etudiant ve ON (ve.id_etudiant=e.id_etudiant) INNER JOIN voie v ON (v.id_voie=ve.id_voie AND v.cle_voie=1 AND v.voie_option=0) LEFT JOIN commentaire com ON (com.id_etudiant=e.id_etudiant) LEFT JOIN ref_cpge cpge ON (cpge.id_ref_cpge=e.id_ref_cpge) LEFT JOIN ref_bac_mention bac_mention ON (bac_mention.id_ref_bac_mention=e.id_ref_bac_mention) LEFT JOIN ref_situation_pre rsp ON (rsp.id_ref_situation_pre=e.id_ref_situation_pre) LEFT JOIN ensai_{annee_base_avant}.voie_etudiant ve_avant ON (ve_avant.id_etudiant=e.id_etudiant) LEFT JOIN ensai_{annee_base_avant}.voie v_avant ON (v_avant.id_voie=ve_avant.id_voie AND v_avant.cle_voie=1) LEFT JOIN ( SELECT moy.id_etudiant, CONCAT(‘M’,LEFT(rtm.lib,1),‘S’,modu.id_periode) AS cat_note, CONCAT(‘R’,LEFT(rtm.lib,1),‘S’,modu.id_periode) AS cat_ratt, modu.id_periode, SUM(moy.moyennem.coefficient)/SUM(m.coefficient) AS moyenne, SUM(moy.rattrapage) AS ratt FROM matiere m INNER JOIN ref_type_matiere rtm ON (rtm.id_ref_type_matiere=m.id_type_matiere) INNER JOIN module modu ON (modu.id_module=m.id_module) INNER JOIN moyenne moy ON (moy.id_matiere=m.id_matiere) WHERE m.bonus=0 GROUP BY moy.id_etudiant, modu.id_periode, m.id_type_matiere ) AS groupe ON (e.id_etudiant=groupe.id_etudiant) LEFT JOIN ( SELECT CONCAT(‘MGS’,modu.id_periode) AS cat_note, modu.id_periode, mmoy.id_etudiant, SUM(mmoy.moyennemmoy.coefficient)/SUM(mmoy.coefficient) AS moyenne FROM moyenne_module mmoy INNER JOIN module modu ON (modu.id_module=mmoy.id_module) WHERE IFNULL(modu.id_periode,0)&gt;0 AND mmoy.moyenne IS NOT NULL GROUP BY modu.id_periode, mmoy.id_etudiant ) AS semestre ON ( e.id_etudiant=semestre.id_etudiant AND groupe.id_periode=semestre.id_periode ) GROUP BY e.id_etudiant, groupe.cat_note ) AS aide GROUP BY id_etudiant HAVING MGS1 IS NOT NULL OR MGS2 IS NOT NULL ORDER BY situation, nom\n—– DERNIERE REQUETE —–\nSELECT RIGHT(DATABASE(),4) AS annee, aux_voie.voie_lib, e.nom, e.prenom, e.libelle_etat_civil, e.id_etudiant, mo.libelle AS ue, m.id_type_matiere, m.intitule AS matiere, m.code_matiere AS code_matiere, ROUND(moy.moyenne,2) AS moyenne_matiere, ROUND(moymo.moyenne,2) AS moyenne_ue, e.paysnai, e.id_ref_paysnai, e.id_nationalite, e.libelle_statut_etudiant, e.concours_origine, e.concours_annee, e.etab_origine_formation, e.bac_annee, e.bac_mention, e.certif_anglais_org, e.certif_anglais_score, e.toeic FROM moyenne moy LEFT JOIN etudiant e ON (e.id_etudiant=moy.id_etudiant) LEFT JOIN matiere m ON (m.id_matiere=moy.id_matiere) LEFT JOIN module mo ON (m.id_module=mo.id_module) LEFT JOIN moyenne_module moymo ON (moymo.id_module=m.id_module AND moymo.id_etudiant=e.id_etudiant) LEFT JOIN ( SELECT ve.id_etudiant, GROUP_CONCAT(DISTINCT v.lib ORDER BY v.lib) AS voie_lib FROM voie_etudiant ve INNER JOIN voie v ON (v.id_voie=ve.id_voie) GROUP BY ve.id_etudiant ) aux_voie ON (aux_voie.id_etudiant=e.id_etudiant) GROUP BY e.id_etudiant, moymo.id_module, moy.id_matiere ORDER BY aux_voie.voie_lib, e.id_etudiant DESC"
  }
]